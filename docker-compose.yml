version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: devforge-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-devforge}
      POSTGRES_USER: ${POSTGRES_USER:-devforge}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devforge_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - devforge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-devforge}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: devforge-redis
    command: ["sh", "-c", "exec redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - devforge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # AI SERVICES
  # =============================================================================
  ollama:
    image: ollama/ollama:latest
    container_name: devforge-ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    networks:
      - devforge-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devforge-backend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${API_PORT:-3001}
      - POSTGRES_URL=${POSTGRES_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - OLLAMA_URL=http://ollama:11434
    volumes:
      - ./storage:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${API_PORT:-3001}:3001"
    networks:
      - devforge-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:${API_PORT:-3001}/api
    container_name: devforge-frontend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - devforge-network
    depends_on:
      - backend
    restart: unless-stopped

  # =============================================================================
  # MICROSERVICES
  # =============================================================================
  ai-assistant:
    build:
      context: ./services/ai-assistant
      dockerfile: Dockerfile
    container_name: devforge-ai-assistant
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3003
      - OLLAMA_URL=http://ollama:11434
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    networks:
      - devforge-network
    depends_on:
      - ollama
    restart: unless-stopped

  workspace-manager:
    build:
      context: ./services/workspace-manager
      dockerfile: Dockerfile
    container_name: devforge-workspace-manager
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3004
      - DOCKER_HOST=unix:///var/run/docker.sock
      - STORAGE_PATH=/app/storage
    volumes:
      - ./storage:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - devforge-network
    restart: unless-stopped

  database-provisioner:
    build:
      context: ./services/database-provisioner
      dockerfile: Dockerfile
    container_name: devforge-database-provisioner
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3005
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - devforge-network
    restart: unless-stopped

  realtime-server:
    build:
      context: ./services/realtime-server
      dockerfile: Dockerfile
    container_name: devforge-realtime-server
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${SOCKET_PORT:-3002}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "${SOCKET_PORT:-3002}:3002"
    networks:
      - devforge-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: devforge-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${METRICS_PORT:-9090}:9090"
    networks:
      - devforge-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: devforge-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3006:3000"
    networks:
      - devforge-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # =============================================================================
  # REVERSE PROXY
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: devforge-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - devforge-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: devforge-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - devforge-network
    restart: unless-stopped

  # =============================================================================
  # VOLUMES
  # =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  devforge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 